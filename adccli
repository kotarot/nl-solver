#!/usr/bin/env python
# -*- coding: utf-8 ; mode: python -*-
#
# a sample command line interface for ADC service
#
# Copyright (C) 2015 Fujitsu

import getopt
import sys, os
from adcclient import ADCClient
from getpass import getpass

def usage(cli):
    print "usage:", os.path.basename(sys.argv[0]), "[options] command",
    print """
options:
  -h|--help
  -d|--debug
  -v|--verbose
  -c|--config=CONFIGFILE (default: %s)
  -u|--username=USERNAME (default: %s)
  -p|--password=PASSWORD
  -U|--URL=URL           (default: %s)
command:
  login
  logout
  whoami
  password [NEWPASSWORD]
  get-user-list
  get-user [USERNAME ...]
  get-q [NUMBER ...]
  put-a NUMBER FILENAME
  put-a-info NUMBER CPU_SEC MEM_BYTE [MISC_TEXT]
  get-a-info [NUMBER]
  delete-a-info NUMBER
  get-a [NUMBER ...]          # test mode only
  delete-a [NUMBER ...]       # test mode only
  get-user-q [NUMBER ...]
  post-user-q NUMBER FILENAME
  put-user-q NUMBER FILENAME
  delete-user-q [NUMBER ...]
  check-q FILENAME
  put-user-alive MSG
  get-user-log [NUMBER (seconds|days)]
  delete-user-log [NUMBER (seconds|days)]
  score
  get-root
admin command:
  create-user USERNAME PASSWORD DISPLAYNAME UID GID
  create-users FILENAME
  delete-user [USERNAME ...]
  get-admin-q-all
  get-admin-q-list
  put-admin-q-list
  delete-admin-q-list
  get-admin-a-all
  delete-admin-a-all
  get-log [NUMBER (seconds|days)]
  delete-log [NUMBER (seconds|days)]
  timekeeper-enabled [0|1]
  timekeeper-state [init|im0|Qup|im1|Aup|im2]
""" % (cli.config, cli.username, cli.url)

def main():
    def output():
        if cli.output_file is None:
            f = sys.stdout
        else:
            f = open(cli.output_file, "w")
        if len(args[1:]) == 0:
            f.write(resx[6]['msg']+"\n")
        else:
            for res in resx:
                f.write(res[6]['msg']+"\n")
        if cli.output_file is not None:
            f.close()

    #
    cli = ADCClient()
    cli.read_config()
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hdvc:u:p:U:o:", ["help","debug","verbose","config=","username=","password=","URL=","output="])
    except getopt.GetoptError:
        usage(cli)
        sys.exit(2)
    for o,a in opts:
        #print "o=",o,"a=",a
        if o in ("-h","--help"):
            usage(cli)
            sys.exit(1)
        elif o in ("-d","--debug"):
            cli.debug = True
        elif o in ("-v","--verbose"):
            cli.verbose = True
        elif o in ("-c","--config"):
            cli.config = a
            cli.read_config()
        elif o in ("-u","--username"):
            cli.username = a
        elif o in ("-p","--password"):
            cli.password = a
        elif o in ("-U","--URL"):
            cli.url = a
        elif o in ("-o","--output"):
            cli.output_file = a
        else:
            print "Error: Unknown option:",o
    #
    if 0 < len(args):
        a = args[0]
        if a == 'login':
            if cli.password is None:  cli.password = getpass()
            res = cli.login(args[1:])
            print res[6]['msg']
        elif a == 'logout':
            res = cli.logout(args[1:])
            print res[6]['msg']
        elif a == 'whoami':
            res = cli.whoami(args[1:])
            print res[6]['msg']
        elif a == 'password':
            newpassword = None
            if cli.password is None:  cli.password = getpass()
            if 1 < len(args):
                newpassword = args[1]
            else:
                newpassword1 = getpass('New Password: ')
                newpassword2 = getpass('New Password again: ')
                if newpassword1 == newpassword2:
                    newpassword = newpassword1
                else:
                    print "password mismatch. not changed"
            if newpassword is not None:
                res = cli.change_password(newpassword)
                print res[6]['msg']
        elif a == 'get-user-list':
            res = cli.get_user_list()
            #print res[6]
            for u in res[6]: print u.encode('utf-8'),
        elif a == 'get-user':
            res2 = cli.get_user_info(args[1:])
            for res in res2: print res[6]['msg']
        elif a == 'create-user':
            res = cli.create_user(args[1:])
            print res[6]['msg']
        elif a == 'create-users':
            res2 = cli.create_users(args[1])
            for res in res2: print res[6]['msg']
        elif a == 'delete-user':
            res2 = cli.delete_users(args[1:])
            for res in res2: print res[6]['msg']
        elif a == 'get-q':
            resx = cli.get_q(args[1:])
            output()
        elif a == 'get-a':
            resx = cli.get_a(args[1:])
            output()
        elif a == 'delete-a':
            for i in args[1:]:
                res = cli.delete_a(int(i))
                print res[6]['msg']
        elif a == 'put-a':
            res = cli.put_a(args[1:])
            print res[6]['msg']
        elif a == 'put-a-info':
            res = cli.put_a_info(args[1:])
            print res[6]['msg']
        elif a == 'get-a-info':
            res = cli.get_or_delete_a_info(args[1:], delete=False)
            print res[6]['msg']
            if 'results' in res[6]:
                for i in res[6]['results']:
                    #print i # iはdictのはず
                    for key,value in i.iteritems():
                        #if key == 'msg': continue
                        print "%s:" % key.encode('utf-8'), value
        elif a == 'delete-a-info':
            res = cli.get_or_delete_a_info(args[1:], delete=True)
            print res[6]['msg']
            for i in res[6]['results']: print i
        elif a == 'get-user-q':
            resx = cli.get_user_q(args[1:])
            if len(args[1:]) == 0:
                print resx[6]['msg']
            else:
                for res in resx:
                    #print "status=", res[1]
                    print res[6]['msg']
        elif a == 'post-user-q':
            q_num = int(args[1])
            q_file = args[2]
            res = cli.post_user_q(q_num, q_file)
            print res[6]['msg']
        elif a == 'put-user-q':
            q_num = int(args[1])
            q_file = args[2]
            res = cli.put_user_q(q_num, q_file)
            print res[6]['msg']
        elif a == 'delete-user-q':
            for i in args[1:]:
                res = cli.delete_user_q(int(i))
                print res[6]['msg']
        elif a == 'check-q':
            res = cli.check_q(args[1])
            print res[6]['msg']
        elif a == 'get-admin-q-all':
            res = cli.get_admin_q_all(args[1:])
            print res[6]['msg']
        elif a == 'get-admin-a-all':
            res = cli.get_admin_a_all(args[1:])
            print res[6]['msg']
        elif a == 'delete-admin-a-all':
            res = cli.delete_admin_a_all(args[1:])
            print res[6]['msg']
        elif a == 'get-admin-q-list':
            res = cli.get_admin_q_list(args[1:])
            print res[6]['msg']
        elif a == 'put-admin-q-list':
            res = cli.put_admin_q_list(args[1:])
            print res[6]['msg']
        elif a == 'delete-admin-q-list':
            res = cli.delete_admin_q_list(args[1:])
            print res[6]['msg']
        elif a == 'put-user-alive':
            res = cli.put_user_alive(args[1:])
            print res[6]['msg']
        elif a == 'get-root':
            res = cli.get_root(args[1:])
            print res[6]['msg']
        elif a in ('get-log', 'get-user-log', 'delete-log', 'delete-user-log'):
            res = cli.get_or_delete_log(args[1:], a)
            delete = (a.split('-')[0] == 'delete')
            print res[6]['msg']
            if 'results' in res[6]:
                for i in res[6]['results']:
                    if delete:
                        print "%s" % (i['date'])
                    else:
                        print "%s %s: %s" % (i['date'], i['username'], i['what'])
        elif a == 'score':
            res = cli.score(args[1:])
            #print "res=",res
            print res[6]['msg']
        elif a == 'timekeeper-enabled':
            res = cli.timekeeper_enabled(args[1:])
            print res[6]['msg']
        elif a == 'timekeeper-state':
            res = cli.timekeeper_state(args[1:])
            print res[6]['msg']
        else:
            print "Error: Unknown command:", a
    #
    cli.write_config()

if __name__ == "__main__":
    main()
